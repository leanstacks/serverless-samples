plugins:
  - serverless-dynamodb-local
  - serverless-offline # must be last plugin in list

service: samples-rest-dynamodb-local

custom:
  tableName: 'users-table-${self:provider.stage}'
  dynamodb:
    stages:
      - dev
    start:
      migrate: true
  isOffline:
    dev: true
    prod: false
  stage: ${opt:stage, self:provider.stage}

provider:
  name: aws
  runtime: nodejs14.x
  stage: dev
  region: us-east-1
  memorySize: 128
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - { "Fn::GetAtt": ["UsersDynamoDBTable", "Arn" ] }
  environment:
    IS_OFFLINE: ${self:custom.isOffline.${self:custom.stage}}
    USERS_TABLE: ${self:custom.tableName}

functions:
  getUser:
    handler: index.handler
    events:
      - http:
          path: /users/{proxy+}
          method: get
  getUsers:
    handler: index.handler
    events:
      - http:
          path: /users
          method: get
  createUser:
    handler: index.handler
    events:
      - http:
          path: /users
          method: post
  updateUser:
    handler: index.handler
    events:
      - http:
          path: /users/{proxy+}
          method: put
  deleteUser:
    handler: index.handler
    events:
      - http:
          path: /users/{proxy+}
          method: delete

resources:
  Resources:
    UsersDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: userId
            AttributeType: S
        KeySchema:
          -
            AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tableName}